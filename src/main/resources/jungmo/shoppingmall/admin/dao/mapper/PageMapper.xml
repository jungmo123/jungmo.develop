<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="jungmo.shoppingmall.admin.order.dao.mapper.PageMapper">
	<select id = "getTotRowCnt" parameterType="string" resultType = "int">
		select count(distinct ord_num)
		from orders
		<where>
			<if test = "_parameter != null and _parameter.equals('All')">
				ord_type != '주문취소' and ord_type != '환불' and ord_type != '교환'
			</if>
			<if test = "_parameter != null and _parameter.equals('One')">
				ord_type = '배송준비중'
			</if>
			<if test = "_parameter != null and _parameter.equals('Two')">
				ord_type = '배송중'
			</if>
			<if test = "_parameter != null and _parameter.equals('Three')">
				ord_type = '배송완료'
			</if>
			<if test = "_parameter != null and _parameter.equals('Four')">
				ord_type = '주문취소'
			</if>
		</where>
	</select>
	
	<select id = "getCancelTotRowCnt" parameterType="string" resultType = "int">
		select count(distinct ord_num)
		from order_cancels
		<where>
			<if test = "_parameter != null and _parameter.equals('One')">
				odc_type = '처리전'
			</if>
			<if test = "_parameter != null and _parameter.equals('Two')">
				odc_type = '처리완료'
			</if>
		</where>
	</select>
	 
	<select id = "getRefundTotRowCnt" parameterType="string" resultType = "int">
		select count(distinct ord_num)
		from refunds
		<where>
			<if test = "_parameter != null and _parameter.equals('One')">
				ref_state = '처리전'
			</if>
			<if test = "_parameter != null and _parameter.equals('Two')">
				ref_state = '처리완료'
			</if>
		</where>
	</select>
	
	<select id = "getExchangeTotRowCnt" parameterType="string" resultType = "int">
		select count(distinct ord_num)
		from exchanges
		<where>
			<if test = "_parameter != null and _parameter.equals('One')">
				exc_state = '처리전'
			</if>
			<if test = "_parameter != null and _parameter.equals('Two')">
				exc_state = '처리완료'
			</if>
		</where>
	</select>
 
	<select id = "getBoardTotRowCnt" parameterType="map" resultType = "int">
		select count(pos_num)
		from posts
		where bor_num = #{borNum}
		<if test = "poscNum != 0">
			and posc_num = #{poscNum}
		</if>
	</select>
	 
	<select id = "getBoardSearchTotRowCnt" parameterType="map" resultType = "int">
		select count(pos_num)
		from posts
		where bor_num = #{borNum}
		<if test = "poscNum != 0">
			and posc_num = #{poscNum}
		</if>
     	 <if test = "searchType == 1">
     	 	<if test = "searchContent !=  ''">
				 and (pos_title like '%' || #{searchContent} || '%' or pos_content like '%' || #{searchContent} || '%')    	 	
     	 	</if>
    	 </if> 
	</select>
	
	<select id = "getBorcTotRowCnt"  resultType = "int">
		select count(borc_num)
		from board_categories
		where bor_num = #{borNum}
	</select>
	
	<select id = "getGodqTotRowCnt"  resultType = "int">
		select count(godq_num)
		from goods_questions
	</select> 
	
	<select id = "getGodqSearchTotRowCnt"  parameterType="map" resultType = "int">
		<if test = "godqType != 'on'">
			select count(godq_num)
			from goods_questions
			where godq_content like '%' || #{godqContent} || '%'
		</if>
		<if test = "godqType == 'on'">
		select count(goods_questions.godq_num)
		from goods_questions
     	where not exists(select * from goods_anser where goods_questions.godq_num = goods_anser.godq_num) and godq_content like '%' || #{godqContent} || '%'	
		</if>
	</select>
	 
	<select id = "getOtoqTotRowCnt"  resultType = "int">
		select count(otoq_num)
		from oto_questions
	</select> 
 
	<select id = "getOtoqSearchTotRowCnt"  parameterType="map" resultType = "int">
		<if test = "otoqType != 'on'">
			select count(otoq_num)
		  	from oto_questions
			where (otoq_content like '%' || #{otoqContent} || '%') or (otoq_title like '%' || #{otoqContent} || '%')
		</if>
		<if test = "otoqType == 'on'">
			select count(otoq_num)
			from oto_questions
      		where not exists(select * from oto_anser where oto_questions.otoq_num = oto_anser.otoq_num)
       		and ((otoq_content like '%' || #{otoqContent} || '%') or (otoq_title like '%' || #{otoqContent} || '%'))
		</if>
	</select>
	 
	<select id = "getGodrTotRowCnt" resultType = "int">
		select count(godr_num)
		from goods_reviews
	</select>
 
	<select id = "getGodrSearchTotRowCnt"  parameterType="map" resultType = "int">
		<if test = "godcNum == 0">
			select count(godr_num)
		  	from goods_reviews
			where (godr_content like '%' || #{godrContent} || '%')
		</if>
		<if test = "godcNum != 0">
			select count(godr_num)
		  	from goods_reviews
		  	join goods
		  	on (goods_reviews.god_num = goods.god_num)
			where (godr_content like '%' || #{godrContent} || '%') and (goods.godc_num = #{godcNum})
		</if>
	</select>
	 
	<select id = "getEventTotRowCnt" resultType = "int">
		select count(event_num)
		from events
	</select>
	
	<select id = "getEventSearchTotRowCnt"  parameterType="string" resultType = "int">
		select count(event_num)
		from events
		where (event_content like '%' || #{eventContent} || '%') or (event_title like '%' || #{eventContent} || '%')
	</select>
	
	<select id = "getDateTotRowCnt" parameterType= "page" resultType = "int">
	<![CDATA[	
	select count(distinct ord_num)
		from orders
		where ord_date > #{date1} and
		ord_date < #{date2} and
		ord_num like '%' || #{ordNum} || '%'
		and ord_type != '교환' and ord_type != '환불' and ord_type != '주문취소'
		order by ord_num
	]]>
	</select>
	
	<select id = "getCancelDateTotRowCnt" parameterType= "page" resultType = "int">
	<![CDATA[	
	select count(distinct ord_num)
		from order_cancels
		where odc_date > #{date1} and
		odc_date < #{date2} and
		ord_num like '%' || #{ordNum} || '%'
		order by ord_num
	]]>
	</select>
	
	<select id = "getRefundDateTotRowCnt" parameterType= "page" resultType = "int">
	<![CDATA[	
	select count(distinct ord_num)
		from refunds
		where ref_requestdate > #{date1} and
		ref_requestdate < #{date2} and
		ord_num like '%' || #{ordNum} || '%'
		order by ord_num
	]]>
	</select>
	 
	<select id = "getExchangeDateTotRowCnt" parameterType= "page" resultType = "int">
	<![CDATA[	
	select count(distinct ord_num)
		from exchanges
		where exc_requestdate > #{date1} and
		exc_requestdate < #{date2} and
		ord_num like '%' || #{ordNum} || '%'
		order by ord_num
	]]>
	</select>
	
	<select id = "getUserTotRowCnt" parameterType = "string" resultType = "int">
		select count(user_id)
		from users
		where user_state = #{userState}
	</select>
	
	<select id = "getUserSearchTotRowCnt"  parameterType="us" resultType = "int">
		<![CDATA[
		select count(*) from(
			select c.user_id,user_name,user_level,user_joindate,purchase_amount,visitcnt,user_mailagreement,d.point from(
       		 	select user_joindate,user_name,user_level,user_id,sum(totalprice) as purchase_amount,visitcnt,user_mailagreement from(
				select user_joindate,user_name,user_id,ord_num,
				(case when sum(price)-usingpoint <  freedeliverymp then sum(price)-usingpoint+basic_fee
				else sum(price)-usingpoint
				end) as totalprice
				,visitcnt,user_mailagreement,user_level from(
				select b.user_joindate,b.user_name,b.user_id,b.ord_num,b.god_num,b.god_amount*(b.god_sellingprice+nvl(a.price,'0')) as price,visitcnt,user_mailagreement,b.usingpoint,freedeliverymp,basic_fee,b.user_level from(
				(select orders.user_id,purchase_option.ord_num,purchase_option.god_num,sum(opt_price) price
				from purchase_option
        		full outer join orders
        		on (purchase_option.ord_num = orders.ord_num)
				full outer join users
				on (orders.user_id = users.user_id)
        		group by orders.user_id,purchase_option.ord_num,purchase_option.god_num
        		having orders.user_id is not null and purchase_option.god_num is not null) a
				full outer join
				(select users.user_id,purchases.god_num,purchases.ord_num,god_sellingprice,god_amount,usingpoint,user_joindate,user_name,user_level,count(distinct loglog_date) as visitcnt,user_mailagreement,freedeliverymp,basic_fee
				from users
				full outer join orders
				on (orders.user_id = users.user_id)
				full outer join purchases
				on (orders.ord_num = purchases.ord_num and orders.ord_type != '교환' and orders.ord_type != '환불' and orders.ord_type != '주문취소')
				full outer join goods
				on (purchases.god_num = goods.god_num)
				full outer join login_logs
				on (users.user_id = login_logs.user_id)
				join point_policies
				on (pnp_num = 1)
				join delivery_policies
				on (dvp_num = 1)
				group by users.user_id,user_name,user_level,user_mailagreement,user_joindate,user_state,god_sellingprice,god_amount,purchases.god_num,purchases.ord_num,usingpoint,freedeliverymp,basic_fee,user_level
				having user_state = '가입') b
				on a.user_id = b.user_id and a.ord_num = b.ord_num and a.god_num = b.god_num))
				group by user_joindate,user_name,user_id,ord_num,visitcnt,user_mailagreement,usingpoint,freedeliverymp,basic_fee,user_level
				having user_id is not null)
				group by user_joindate,user_name,user_id,visitcnt,user_mailagreement,user_level
				order by user_joindate desc) c
             	full outer join
		        (select user_id,sum(polg_change) point
		        from point_logs
		        group by user_id) d
		        on(c.user_id = d.user_id)
		        where
				]]>
				<if test = "SearchBar == 1" >
				(user_name like '%' || #{title} || '%')
				</if>
				<if test = "sdate !='' " >
				<![CDATA[
					and user_joindate > to_date(#{sdate},'YYYY-MM-DD')
					and user_joindate < to_date(#{edate},'YYYY-MM-DD')
					]]>
				</if>
				<if test = "userLevel != 0">
				and user_level = #{userLevel}
				</if>
				<if test = "minPrice != ''">
				<![CDATA[
				and purchase_amount > #{minPrice}
				]]>
				</if>
				<if test = "maxPrice != ''">
				<![CDATA[
				and purchase_amount < #{maxPrice}
				]]>
				</if>
				<if test = "minSaved != ''">
				<![CDATA[
				and point > ${minSaved}
				]]>
				</if>
				<if test = "maxSaved != ''">
				<![CDATA[
				and point < ${maxSaved}
				]]>
				</if>
				<if test = "email != ''">
				and user_mailagreement = #{email}
				</if>
				order by user_joindate desc)
	</select>
	
	<select id = "getLeaveUserSearchTotRowCnt"  parameterType="us" resultType = "int">
		<![CDATA[
		select count(*) from(
        	select c.user_id,user_name,user_level,user_joindate,purchase_amount,visitcnt,user_mailagreement,scd_date,scd_date+90 as duedate,trunc((scd_date+91)-sysdate) as dday,scdc_code,scd_content from(
       		 	select user_joindate,user_name,user_level,user_id,sum(totalprice) as purchase_amount,visitcnt,user_mailagreement from(
				select user_joindate,user_name,user_id,ord_num,
				(case when sum(price)-usingpoint <  freedeliverymp then sum(price)-usingpoint+basic_fee
				else sum(price)-usingpoint
				end) as totalprice
				,visitcnt,user_mailagreement,user_level from(
				select b.user_joindate,b.user_name,b.user_id,b.ord_num,b.god_num,b.god_amount*(b.god_sellingprice+nvl(a.price,'0')) as price,visitcnt,user_mailagreement,b.usingpoint,freedeliverymp,basic_fee,b.user_level from(
				(select orders.user_id,purchase_option.ord_num,purchase_option.god_num,sum(opt_price) price
				from purchase_option
        		full outer join orders
        		on (purchase_option.ord_num = orders.ord_num)
				full outer join users
				on (orders.user_id = users.user_id)
        		group by orders.user_id,purchase_option.ord_num,purchase_option.god_num
        		having orders.user_id is not null and purchase_option.god_num is not null) a
				full outer join
				(select users.user_id,purchases.god_num,purchases.ord_num,god_sellingprice,god_amount,usingpoint,user_joindate,user_name,user_level,count(distinct loglog_date) as visitcnt,user_mailagreement,freedeliverymp,basic_fee
				from users
				full outer join orders
				on (orders.user_id = users.user_id)
				full outer join purchases
				on (orders.ord_num = purchases.ord_num and orders.ord_type != '교환' and orders.ord_type != '환불' and orders.ord_type != '주문취소')
				full outer join goods
				on (purchases.god_num = goods.god_num)
				full outer join login_logs
				on (users.user_id = login_logs.user_id)
				join point_policies
				on (pnp_num = 1)
				join delivery_policies
				on (dvp_num = 1)
				group by users.user_id,user_name,user_level,user_mailagreement,user_joindate,user_state,god_sellingprice,god_amount,purchases.god_num,purchases.ord_num,usingpoint,freedeliverymp,basic_fee,user_level
				having user_state = '탈퇴') b
				on a.user_id = b.user_id and a.ord_num = b.ord_num and a.god_num = b.god_num))
				group by user_joindate,user_name,user_id,ord_num,visitcnt,user_mailagreement,usingpoint,freedeliverymp,basic_fee,user_level
				having user_id is not null)
				group by user_joindate,user_name,user_id,visitcnt,user_mailagreement,user_level
				order by user_joindate desc) c
		        full outer join
		        (select user_id,scd_date,scdc_code,scd_content
		        from secede_users) d
		        on(c.user_id = d.user_id)
		        where c.user_id is not null
		        ]]>
		        <if test = "SearchBar == 1" >
				and (user_name like '%' || #{title} || '%')
				</if>
		        order by user_joindate desc)
	</select>
	 
	<select id = "getGoodsTotRowCnt" resultType = "int">
		select count(*)
		from goods
	</select> 
	
	<select id = "getGoodsSearchTotRowCnt" parameterType = "gs" resultType = "int">
		select count(*) from(
			select god_num,god_name,god_normalprice,god_sellingprice,god_displaytype,god_regdate,god_viewpoint,goods.godc_num,godc_name
			from goods
			join goods_categories
			on (goods.godc_num = goods_categories.godc_num)
			where
				<if test = "SearchBar == 1" >
				(god_name like '%' || #{title} || '%')
				</if>
				<if test = "sdate !='' " >
				<![CDATA[
					and god_regdate > to_date(#{sdate},'YYYY-MM-DD')
					and god_regdate < to_date(#{edate},'YYYY-MM-DD')
					]]>
				</if>
				<if test = "category != 0">
				and goods.godc_num = #{category}
				</if>
				<if test = "minPrice != ''">
				<![CDATA[
				and god_sellingprice > #{minPrice}
				]]>
				</if>
				<if test = "maxPrice != ''">
				<![CDATA[
				and god_sellingprice < #{maxPrice}
				]]>
				</if>
				<if test = "displayType != ''">
				and god_displaytype = #{displayType}
				</if>
				order by god_num desc)
	</select>
</mapper>